import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
from image_transport_py import ImageTransport

class CameraPublisher(Node):
    def __init__(self):
        super().__init__('camera')

        self.image_transport = ImageTransport(
            'camera', image_transport='compressed'
        )

        self.img_pub = self.image_transport.advertise('camera_feed', 10)

        timer_period = 1.0/30.0
        self.timer = self.create_timer(timer_period, self.timer_callback)

        self.cap = cv2.VideoCapture(0)
        self.br = CvBridge()

        if not self.cap.isOpened():
            self.get_logger().error("Could not open webcam.")
            rclpy.shutdown()

    def timer_callback(self):
        ret, frame = self.cap.read()
        if not ret:
            self.get_logger().warn("Failed to capture frame.")
            return

        image_msg = self.br.cv2_to_imgmsg(frame, encoding='bgr8')
        image_msg.header.stamp = self.get_clock().now().to_msg()
        image_msg.header.frame_id = 'camera'

        self.img_pub.publish(image_msg)
        self.get_logger().info('Publishing image')

        cv2.imshow('Live Webcam Feed', frame)
        cv2.waitKey(1)

    def destroy_node(self):
        self.cap.release()
        cv2.destroyAllWindows()
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    camera_publisher = CameraPublisher()

    try:
        rclpy.spin(camera_publisher)
    except KeyboardInterrupt:
        pass

    camera_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
